version: '3.8'
services:
  agentzero:
    image: frdel/agent-zero-run:latest
    ports:
      - "50001:80"

  freqtrade:
    image: freqtradeorg/freqtrade:stable
    #   volumes:
    #      - ./user_data:/freqtrade/user_data  # This will need to be handled dynamically
    ports:
      - "8080:8080" # This will need to be dynamic/configurable
    #   command: >
    #     trade
    #     --logfile /freqtrade/user_data/logs/freqtrade.log
    #     --db-url sqlite:////freqtrade/user_data/tradesv3.sqlite
    #     --config /freqtrade/user_data/config.json # This will be dynamically generated
    #     --strategy MyStrategy # This will be dynamic

  hummingbot:
    image: hummingbot/hummingbot:latest
    # volumes:
    #   - ./hummingbot_configs:/home/hummingbot/conf  # Example, adjust as needed
    ports:
      - "8082:8082" #  Example port, needs to be confirmed/configurable
    # Add other necessary configurations for Hummingbot here.

  backend:
    build: ./backend
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      AGENT_ZERO_API_URL: http://agentzero:80 # Assuming internal Docker networking and port 80
      #AGENT_ZERO_API_KEY: "" # TODO: Get from user and add all other env vars from backend/.env
      # Add FREQTRADE_API_URL and HUMMINGBOT_API_URL here, pointing to the respective services.
    depends_on:
      - agentzero
      - freqtrade  # Added freqtrade as dependency
      - hummingbot  # Added hummingbot as dependency

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001  # Will be updated for local docker
      # Add FREQTRADE_API_URL and HUMMINGBOT_API_URL here, pointing to the respective services (via backend).

# TODO: The image names for the frontend and backend have been removed.
# TODO: This configuration assumes local building of frontend and backend images.
# TODO: Research how to deploy this docker-compose file to JFrog Container Registry,
# TODO: including how to push the images and create a stack. This is no longer required.
# TODO: Figure out how the frontend (on Vercel) will communicate with the backend (on JFrog). This is no longer the case, now local.
# TODO:  Need to get the API keys and other environment variables from the user.